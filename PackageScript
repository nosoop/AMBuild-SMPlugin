# vim: set ts=8 sts=2 sw=2 tw=99 et ft=python:
import os

# Should we bundle the sources for distribution too?
copy_plugin_sources = False

# This is where the files will be output to
# package is the default
builder.SetBuildFolder('package')

# Add any folders you need to this list
folder_list = [
  'addons/sourcemod/plugins',
#  'addons/sourcemod/gamedata',
#  'addons/sourcemod/scripting',
#  'addons/sourcemod/scripting/include',
]

# Create the distribution folder hierarchy.
folder_map = {}
for folder in folder_list:
  norm_folder = os.path.normpath(folder)
  folder_map[folder] = builder.AddFolder(norm_folder)

# Do all straight-up file copies from the source tree.
def CopyFiles(src, dest, files):
  if not dest:
    dest = src
  dest_entry = folder_map[dest]
  for source_file in files:
    source_path = os.path.join(builder.sourcePath, src, source_file)
    builder.AddCopy(source_path, dest_entry)

# Include files 
# CopyFiles('scripting/include', 'addons/sourcemod/scripting/include',
#   [ 'sample.inc', ]
# )

# GameData files
# CopyFiles('gamedata', 'addons/sourcemod/gamedata',
#   [ 'sample.games.txt' ]
# )

# Config Files
#CopyFiles('configs', 'addons/sourcemod/configs',
#  [ 'configfile.cfg',
#  'otherconfig.cfg,
#  ]
#)

# Copy plugins.
# TODO match nesting
for script_path, smx_entry in SourcePawn.plugins.items():
  if copy_plugin_sources:
    builder.AddCopy(script_path, folder_map['addons/sourcemod/scripting'])
  builder.AddCopy(smx_entry, folder_map['addons/sourcemod/plugins'])
